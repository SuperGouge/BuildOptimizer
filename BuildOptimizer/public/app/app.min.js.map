{"version":3,"sources":["app.js","constants.js","controllers/ChampionCtrl.js","controllers/HomeCtrl.js","controllers/MatchCtrl.js","services/Champion.js","services/Match.js","services/Pro.js","services/Version.js"],"names":["app","angular","module","config","$routeProvider","when","templateUrl","controller","otherwise","redirectTo","$compileProvider","aHrefSanitizationWhitelist","$scope","$route","$routeParams","$location","$on","e","current","previous","location","activeViewPath","path","constant","protocol","host","Champion","Pro","Match","Version","version","query","result","champion","get","championId","toJSON","matches","latestMatches","sort","a","b","timestamp","length","slice","forEach","match","region","matchId","matchDto","i","participantIdentities","player","summonerId","participantId","data","participants","push","selectMatch","loading","champions","results","selectChampion","selectedChampion","name","id","regions","includeTimeline","parseInt","events","j","timeline","frames","frame","k","event","eventType","indexOf","eventTyp","items","filter","itemSet","title","type","map","mode","blocks","l","itemEvent","item","itemId","toString","count","m","dic","block","n","hasOwnProperty","Object","keys","blob","Blob","JSON","stringify","url","window","URL","webkitURL","createObjectURL","factory","$resource","$http","apiBaseUrl","method","params","isArray","transformResponse","concat","defaults","headersGetter","status","key"],"mappings":"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","file":"app.min.js","sourcesContent":["var app = angular.module(\"BuildOptimizer\", [\"ngRoute\", \"ngResource\", \"ui.bootstrap\"]);\r\n\r\napp.config([\"$routeProvider\", function($routeProvider) {\r\n    $routeProvider\r\n        .when(\"/\", { templateUrl: \"app/views/home.html\", controller: \"HomeCtrl\" })\r\n        .when(\"/champion/:championId\", { templateUrl: \"app/views/champion.html\", controller: \"ChampionCtrl\" })\r\n        .when(\"/:region/match/:matchId/summoner/:summonerId\", { templateUrl: \"app/views/match.html\", controller: \"MatchCtrl\" })\r\n        .otherwise({ redirectTo: \"/\" });\r\n}])\r\n.config([\"$compileProvider\", function($compileProvider) {\r\n    $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|tel|file|blob):/);\r\n}])\r\n.controller(\"MainCtrl\", [\"$scope\", \"$route\", \"$routeParams\", \"$location\", function($scope, $route, $routeParams, $location) {\r\n    $scope.$on(\"$routeChangeSuccess\", function(e, current, previous) {\r\n        $scope.location = $location;\r\n        $scope.activeViewPath = $location.path();\r\n    });\r\n}]);\r\n","angular.module(\"BuildOptimizer\")\r\n    .constant(\"BASE_URL\", location.protocol + \"//\" + location.host)\r\n    .constant(\"API_BASE_URL\", location.protocol + \"//\" + location.host + \"/api/\")\r\n    .constant(\"REGIONS\", [\"br\", \"eune\", \"euw\", \"kr\", \"lan\", \"las\", \"na\", \"oce\", \"ru\", \"tr\"])\r\n    .constant(\"REGIONS_PBE\", [\"br\", \"eune\", \"euw\", \"kr\", \"lan\", \"las\", \"na\", \"oce\", \"ru\", \"tr\", \"pbe\"]);","angular.module(\"BuildOptimizer\").controller(\"ChampionCtrl\", [\r\n    \"$scope\", \"$routeParams\", \"$location\", \"Champion\", \"Pro\", \"Match\", \"Version\", function($scope, $routeParams, $location, Champion, Pro, Match, Version) {\r\n        $scope.version = \"5.17.1\";\r\n        Version.query(function(result) {\r\n            $scope.version = result[0];\r\n        });\r\n\r\n        $scope.champion = Champion.get({ championId: $routeParams.championId }, function(result) {\r\n            $scope.champion = result.toJSON();\r\n        });\r\n\r\n        $scope.matches = [];\r\n        Pro.query({ championId: $routeParams.championId }, function(result) {\r\n            var latestMatches = result.sort(function(a, b) {\r\n                return a.timestamp < b.timestamp;\r\n            });\r\n            if (latestMatches.length > 12) {\r\n                latestMatches = latestMatches.slice(0, 12);\r\n            }\r\n            angular.forEach(latestMatches, function(match) {\r\n                Match.get({ region: match.region, matchId: match.matchId }, function(result) {\r\n                    result = result.toJSON();\r\n                    var matchDto = { region: match.region, matchId: match.matchId };\r\n                    for (var i = 0; i < result.participantIdentities.length; i++) {\r\n                        if (result.participantIdentities[i].player.summonerId === match.summonerId) {\r\n                            matchDto.participantId = i + 1;\r\n                            matchDto.player = result.participantIdentities[i].player;\r\n                            matchDto.data = result.participants[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                    $scope.matches.push(matchDto);\r\n                });\r\n            });\r\n        });\r\n\r\n        $scope.selectMatch = function(match) {\r\n            $location.path(\"/\" + match.region + \"/match/\" + match.matchId + \"/summoner/\" + match.player.summonerId);\r\n        };\r\n    }\r\n]);","angular.module(\"BuildOptimizer\").controller(\"HomeCtrl\", [\r\n    \"$scope\", \"$location\", \"Champion\", function($scope, $location, Champion) {\r\n        $scope.loading = true;\r\n        $scope.champions = Champion.query(function(results) {\r\n            $scope.champions = results;\r\n            $scope.loading = false;\r\n        });\r\n\r\n        $scope.selectChampion = function(selectedChampion) {\r\n            for (var i = 0; i < $scope.champions.length; i++) {\r\n                var champion = $scope.champions[i];\r\n                if (champion.name === selectedChampion) {\r\n                    $location.path(\"/champion/\" + champion.id);\r\n                }\r\n            }\r\n        }\r\n    }\r\n]);","angular.module(\"BuildOptimizer\").controller(\"MatchCtrl\", [\r\n    \"$scope\", \"$routeParams\", \"$location\", \"Champion\", \"Pro\", \"Match\", \"Version\", \"REGIONS\", function($scope, $routeParams, $location, Champion, Pro, Match, Version, regions) {\r\n        $scope.version = \"5.17.1\";\r\n        Version.query(function(result) {\r\n            $scope.version = result[0];\r\n        });\r\n\r\n        $scope.match = Match.get({ region: $routeParams.region, matchId: $routeParams.matchId, includeTimeline: true }, function(result) {\r\n            result = result.toJSON();\r\n            var matchDto = { region: $routeParams.region, matchId: $routeParams.matchId };\r\n            for (var i = 0; i < result.participantIdentities.length; i++) {\r\n                if (result.participantIdentities[i].player.summonerId === parseInt($routeParams.summonerId, 10)) {\r\n                    matchDto.participantId = i + 1;\r\n                    matchDto.player = result.participantIdentities[i].player;\r\n                    matchDto.data = result.participants[i];\r\n                }\r\n            }\r\n\r\n            matchDto.events = [];\r\n            for (var j = 0; j < result.timeline.frames.length; j++) {\r\n                var frame = result.timeline.frames[j];\r\n                if (frame.events) {\r\n                    for (var k = 0; k < frame.events.length; k++) {\r\n                        var event = frame.events[k];\r\n                        if (event.participantId === matchDto.participantId && event.eventType.indexOf(\"ITEM_\") === 0 && event.eventTyp !== \"ITEM_DESTROYED\") {\r\n                            matchDto.events.push(event);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            matchDto.items = matchDto.events.filter(function(event) {\r\n                return event.eventType === \"ITEM_PURCHASED\";\r\n            });\r\n\r\n            $scope.match = matchDto;\r\n            $scope.champion = Champion.get({ championId: $scope.match.data.championId }, function(result) {\r\n                $scope.champion = result.toJSON();\r\n\r\n                var itemSet = {\r\n                    title: $scope.champion.name,\r\n                    type: \"custom\",\r\n                    map: \"SR\",\r\n                    mode: \"CLASSIC\",\r\n                    blocks: [\r\n                    {\r\n                        type: \"Starting Items\",\r\n                        items: []\r\n                    }, {\r\n                        type: \"First Back\",\r\n                        items: []\r\n                    }, {\r\n                        type: \"Core\",\r\n                        items: []\r\n                    }, {\r\n                        type: \"Late Game\",\r\n                        items: []\r\n                    }]\r\n                };\r\n                \r\n                for (var l = 0; l < matchDto.items.length; l++) {\r\n                    var itemEvent = matchDto.items[l];\r\n                    var item = { id: itemEvent.itemId.toString(), count: 1 };\r\n                    if (itemEvent.timestamp <= 3 * 60 * 1000) {\r\n                        itemSet.blocks[0].items.push(item);\r\n                    } else if (itemEvent.timestamp > 3 * 60 * 1000 && itemEvent.timestamp <= 10 * 60 * 1000) {\r\n                        itemSet.blocks[1].items.push(item);\r\n                    } else if (itemEvent.timestamp > 10 * 60 * 1000 && itemEvent.timestamp <= 25 * 60 * 1000) {\r\n                        itemSet.blocks[2].items.push(item);\r\n                    } else if (itemEvent.timestamp > 25 * 60 * 1000) {\r\n                        itemSet.blocks[3].items.push(item);\r\n                    }\r\n                }\r\n\r\n                for (var m = 0; m < itemSet.blocks.length; m++) {\r\n                    var dic = {};\r\n                    var block = itemSet.blocks[m];\r\n                    for (var n = 0; n < block.items.length; n++) {\r\n                        if (dic.hasOwnProperty(block.items[n].id)) {\r\n                            dic[block.items[n].id]++;\r\n                        } else {\r\n                            dic[block.items[n].id] = 1;\r\n                        }\r\n                    }\r\n\r\n                    itemSet.blocks[m].items = (function(dic) {\r\n                        return Object.keys(dic).map(function(itemId) {\r\n                            return {\r\n                                id: itemId,\r\n                                count: dic[itemId]\r\n                            };\r\n                        });\r\n                    })(dic);\r\n                }\r\n\r\n                $scope.itemSet = itemSet;\r\n\r\n                var blob = new Blob([JSON.stringify(itemSet)], { type: \"application/json;charset=utf-8;\" });\r\n                $scope.url = (window.URL || window.webkitURL).createObjectURL(blob);\r\n            });\r\n        });\r\n    }\r\n]);","angular.module(\"BuildOptimizer\").factory(\"Champion\", [\"$resource\", \"$http\", \"API_BASE_URL\", function($resource, $http, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + \"lol-static-data/:region/champion/:championId\", { region: \"na\" }, {\r\n        query: {\r\n            method: \"GET\",\r\n            params: {},\r\n            isArray: true,\r\n            transformResponse: [].concat($http.defaults.transformResponse).concat(function(data, headersGetter, status) {\r\n                return Object.keys(data.data).map(function(key) {\r\n                    return data.data[key];\r\n                }).sort(function(a, b) {\r\n                    return a.name > b.name;\r\n                });\r\n            })\r\n        },\r\n        get: {\r\n            method: \"GET\",\r\n            params: {},\r\n            //transformResponse: [].concat($http.defaults.transformResponse).concat(function(data, headersGetter, status) {\r\n            //    return Object.keys(data.data).map(function(key) {\r\n            //        return data.data[key];\r\n            //    }).sort(function(a, b) {\r\n            //        return a.name > b.name;\r\n            //    });\r\n            //})\r\n        }\r\n    });\r\n}]);","angular.module(\"BuildOptimizer\").factory(\"Match\", [\"$resource\", \"API_BASE_URL\", function($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + \"match/:region/:matchId\");\r\n}]);","angular.module(\"BuildOptimizer\").factory(\"Pro\", [\"$resource\", \"API_BASE_URL\", function($resource, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + \"pro/:championId\");\r\n}]);","angular.module(\"BuildOptimizer\").factory(\"Version\", [\"$resource\", \"$http\", \"API_BASE_URL\", function($resource, $http, apiBaseUrl) {\r\n    return $resource(apiBaseUrl + \"lol-static-data/:region/versions\", { region: \"na\" });\r\n}]);"],"sourceRoot":"/source/"}